#!/bin/bash

# Interact with search server

set -Eeuo pipefail

# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|status|restart)"
}

# Parse argument.  $1 is the first argument
case $1 in
    "start")
        echo "starting search server ..."
        
        # Check exit code of this to see status of index server
        ./bin/index status
        # This condition means that index server is not running
        if [ $? -eq 1 ] 
        then 
        # Return error
        echo "Error: index server is not running"
        echo "Try ./bin/index start"
        exit 1
        fi

        # Exit 1 if search server already running.
        if pgrep -f "flask --app search run --host 0.0.0.0 --port 8000"; then
            echo "Error: search server is already running"
            exit 1
        fi
        
        # Check if database exists
        if [ ! -f "var/search.sqlite3" ]; 
        then
        # Condition means that database no exist
        echo "Error: can't find search database var/search.sqlite3"
        echo "Try: ./bin/searchdb create"
        exit 1
        fi
        
        mkdir -p var/log
        rm -f var/log/search.log
        flask --app search run --host 0.0.0.0 --port 8000 &> var/log/search.log &
    ;;

    "stop")
        echo "stopping search server ..."
        # Detect GNU vs BSD netcat. We need netcat to close the connection after
        # sending a message, which requires different options.
        set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
        
        # Kill search server
        pkill -f 'flask --app search run --host 0.0.0.0 --port 8000' || true
    ;;
    
    "status")
        # Check status of search server
         if pgrep -f "flask --app search run --host 0.0.0.0 --port 8000"; then
            echo "search server running"
            exit 0
        else
            echo "search server stopped"
            exit 1
        fi
    ;;

    "restart")
        ./bin/search stop
        ./bin/search start
    ;;

    *)
    
    usage
    exit 1
    ;;

esac
